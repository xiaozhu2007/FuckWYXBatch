addEventListener("fetch", (event) => {
    event.respondWith(
        handleRequest(event.request).catch(
            (err) => new Response(err.stack, { status: 500 })
        )
    );
});

async function handleRequest(request) {
    const { pathname } = new URL(request.url);
    switch (pathname) {
        case '/':
            return new Response(`<!DOCTYPE html><body><h1>Hello World</h1><p>This markup was generated by a Cloudflare Worker.</p></body>`);

        case '/record':
            var timestamp = Date.parse(new Date());
            const { headers } = request;
            const GetData = headers.get('data') || '';
            if (GetData != '') {
                await KVNAME.put(timestamp, "Data:" + GetData)
                return new Response("OK", { status: 200 });
            } else {
                return new Response("Bad Request.", { status: 400 });
            }

        case '/favicon.ico':
            return new Response(null, { status: 204 });

        case '/robots.txt':
            let txt = `# Fuck You --By Github@xiaozhu2007
  #你们脚本小子整天扫网站有意思吗？
  #AWVS 扫静态网站是不是有病，能扫出个鬼啊，静态网站连后台都没有，真不知道扫啥玩意儿
  #另外网站有日志的，AWVS 特征这么明显，非法扫描入侵违法知道吗？
  #然而你最后还是扫不出啥玩意
  User-agent: SB Script Kiddie
  Disallow: /awvs
  Disallow: /nessus
  Disallow: /sqlmap
  Disallow: /hacker
  Disallow: /nexpose
  Disallow: /sb
  `;
            return new Response(txt, { status: 200 });
    }

    return new Response('Not Found.', { status: 404 });
}

/**
 * rawHtmlResponse returns HTML inputted directly
 * into the worker script
 * @param {string} html
 */
async function rawHtmlResponse(html) {
    const init = {
        headers: {
            'content-type': 'text/html;charset=UTF-8',
        },
    };
    return new Response(html, init);
}

/**
 * readRequestBody reads in the incoming request body
 * Use await readRequestBody(..) in an async function to get the string
 * @param {Request} request the incoming request to read from
 */
async function readRequestBody(request) {
    const { headers } = request;
    const contentType = headers.get('content-type') || '';

    if (contentType.includes('application/json')) {
        return JSON.stringify(await request.json());
    } else if (contentType.includes('application/text')) {
        return request.text();
    } else if (contentType.includes('text/html')) {
        return request.text();
    } else if (contentType.includes('form')) {
        const formData = await request.formData();
        const body = {};
        for (const entry of formData.entries()) {
            body[entry[0]] = entry[1];
        }
        return JSON.stringify(body);
    } else {
        // Perhaps some other type of data was submitted in the form
        // like an image, or some other binary data.
        return 'a file';
    }
}